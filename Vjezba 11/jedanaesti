#define _CRT_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#define IME_MAX 64

typedef struct _elementTab* pozicija;
typedef struct _elementTab* hashListe;//moga san korisit i poziciju al nebi bilo jasno jer koriste za razl stvari
typedef struct _elementTab
{
	int mb;
	char ime[IME_MAX];
	char prezime[IME_MAX];
	pozicija next;

}Student;

typedef struct _hashTablica
{
	int brojElemenata;//njih ce bit 11
	hashListe* niz;//to je niz=pokazivac na jednu od 11 listi elemenata student,sama hashlista je pokazivac na studenta

}hashTablica;

int dajIndeksZaTablicu(pozicija p, int brojElemenata)
{
	int br = 0, i = 0;
	for (i = 0; i < 4; i++)
	{
		if ((int)toupper(p->ime[i]) >= 65 && (int)toupper(p->ime[i]) <= 90) br = br + (int)toupper(p->ime[i]);//pretvaran u velika slova da ne bi racunalo razlicito mala velika jer je razl acii vrijednost
		//else to nije znak pa necemo racunat vjv je krivo utipkano, ali cila provjera je zato da ako ima manje od 5 slova prezime da nebi errora bilo
	}

	br = br % brojElemenata;
	return br;
}

int sveUVelika(char ime[IME_MAX])
{
	int i = 0;
	while (ime[i])
	{
		ime[i] = toupper(ime[i]);
		i++;
	}
	return 0;
}

int usporediImena(char ime1[IME_MAX], char prezime1[IME_MAX], char ime2[IME_MAX], char prezime2[IME_MAX])
{// vraca - 1 ako je raspored ka u zagradama 1 ide ispred 2 , -1 ako obbrnuto
	sveUVelika(ime1);
	sveUVelika(prezime1);
	sveUVelika(ime2);
	sveUVelika(prezime2);

	if (strcmp(prezime1, prezime2) < 0) return -1; //strcmp vraca -1 ako je raspored ka u zagradama,-1 ako obbrnuto,0 ako su jednaki
	else if(strcmp(prezime1, prezime2) > 0) return 1;
	else if (strcmp(prezime1, prezime2)==0)
			{
				if (strcmp(ime1, ime2) < 0) return -1;
				else if (strcmp(ime1, ime2) > 0) return 1;
				else return -1;//isto ime i prezime pa svjedno, nama u funkciji pase tako da recemo da ide 
			}
	else return 0;
}
pozicija mjestoUListi(int indeks, pozicija onajkojegUnosimo, hashTablica h)
{
	int i = 1;
	pozicija prethodni;
	pozicija gdjeunijeti= h.niz[indeks];
	while (usporediImena(gdjeunijeti->ime, gdjeunijeti->prezime,onajkojegUnosimo->ime,onajkojegUnosimo->prezime)==-1 && gdjeunijeti!=NULL )
	{
		prethodni = gdjeunijeti;
		gdjeunijeti = gdjeunijeti->next;
	}

	return prethodni;
}

int unosUTablicu(hashTablica h)
{
	int indeks;
	pozicija unos=(pozicija)malloc(sizeof(Student));
	if (unos == NULL)
	{
		printf("Greska pri alokaciji memorije za unos!!");
		return -1;
	}

	else
	{
		printf("Unesite ime studenta kojeg unosite:\n");
		scanf("%s", (unos->ime));
		printf("Unesite prezime studenta kojeg unosite:\n");
		scanf("%s", (unos->prezime));
		printf("Unesite maticni broj studenta kojeg unosite:\n");
		scanf("%d", &unos->mb);

		indeks = dajIndeksZaTablicu(unos, h.brojElemenata);
		if (h.niz[indeks] == NULL)
		{
			//samo unesi jer je misto na tom indeksu prazno
		}
	 // else vec ima neko na tom indeksu, tj imamo vezanu listu, ubesi u nju na odredeno misto po imenu/prezimenu

	}
}

int main()
{
	int i=0;
	hashTablica* nova=(hashTablica*)malloc(sizeof(hashTablica));
	nova->brojElemenata = 11;
	for (i = 0; i < 11; i++)
	{
		nova->niz[i] = NULL;
	}
  //triba menu napravit
	return 0;
}
